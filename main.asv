clc;clear;close all;
%A/D Conversion
[audio1, fs] = audioread('project.wav');

% This is the A/D converter, completely copied honestly

audio = audio1(:,1);
disp(length(audio));
audio = audio(1:100);
audio_normalized = int16(audio * 32767); 
audio_binary = dec2bin(typecast(audio_normalized(:), 'uint16'), 16); 
binary_vector = audio_binary(:)';
% disp(binary_vector);

%------------------------------------------------------------------------------
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%                             encoding                                %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
l = length(binary_vector);
k = 8; 
m = 4; %mapping to 4 bits 

%This section of the code encodes the binary vector using 4-PAM 
symbols_vector = fourpammapA(binary_vector);
% disp(length(symbols_vector))
% symbols_vector = [1 1 1 3 3 -3 -1 1 1 1 3 3 -3 -1 1 1 1 3 3 -3 -1];

%-------------------------------------------------------------------------------

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%                             line encoding                           %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% disp(l);
symbols_vector_up = zeros(1,m*l/2);
for j = 1:l/2
    symbols_vector_up(j + (j-1)*(m-1)) = symbols_vector(j);
end %you could have just used upsample, but okie
% Rectangular pulse
p1 = [ones(1,k/2)];

%raised cosine pulse 
a = 0.5;
[p2, ~] = raised_cosine(a, 4, k/2);

line_vector_rect = conv(symbols_vector_up,p1,'same');
line_vector_rcos = conv(symbols_vector_up, p2, 'same');
% figure;
% plot(line_vector_rect);
% hold on
% plot(line_vector_rcos);
% hold on
% stem(1:m*k, symbols_vector_up);
% hold off
%-------------------------------------------------------------------------------------

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%                             modulation                              %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%rectangular encoded: 
 fc = 1e6;
len_ip = length(symbols_vector_up); 
%Tb = Ts*logM
t = (0:len_ip-1)/(0.5*fs);
carrier = cos(fc*2*pi*t);
% disp(length(t)); disp(length(t));
% disp(length(line_vector_rect)); disp(length(carrier))
modulated_rect_vec = line_vector_rect .* carrier;
modulated_rcos_vec = line_vector_rcos .* carrier;

% figure;
% % plot(t,modulated_rect_vec);
% plot(t,modulated_rcos_vec);

% figure; 
% subplot(2,1,1)
% stem(1:length(fft(line_vector_rect)),abs(fft(line_vector_rect)))
% subplot(2,1,2)
% stem(1:length(fft(modulated_rect_vec)), abs(fft(modulated_rect_vec)))

%_---------------------------------------------------------------------

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%                                 channel                             %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Channel memoryless: 
% assume channel noise has SNR = 3
channel_op_rcos = awgn(modulated_rcos_vec, 1);
channel_op_rect = awgn(modulated_rect_vec, 1); 
% figure; 
% subplot(2,1,1)
% plot(channel_op_rcos);
% subplot(2,1,2);
% plot(channel_op_rect);
% plot(channel_op_rcos);


%channel memory: 
% Parameters
a = 0.5; 
b = 1;
Tb = 2/fs;
t_h = 0:Tb:(2*Tb);  % Covering 0 to 2Tb for two delta functions
h = a * (t_h == 0) + (1 - a) * (t_h == b*Tb);  % Impulse response

ch_m_o_rcos = conv(modulated_rcos_vec, h, 'same'); 




%---------------------------------------------------------------------------------------

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%                             demodulation                            %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
demod_rect_vec = channel_op_rect.*carrier;
demod_rcos_vec = channel_op_rcos.*carrier; 
% figure;
% plot(t, demod_rect_vec);
% plot(t, demod_rcos_vec);

%----------------------------------------------------------------------------------

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%                             line decoding                           %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

line_decoded_rect_vec = conv(demod_rect_vec, p1, 'same');
line_decoded_rect_vec = 3*line_decoded_rect_vec/max(line_decoded_rect_vec);

line_decoded_rcos_vec = conv(demod_rcos_vec, p1, 'same');
line_decoded_rcos_vec = 3*line_decoded_rcos_vec/max(line_decoded_rcos_vec);
% figure;
% plot(line_decoded_rect_vec)
% plot(line_decoded_rcos_vec);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%                            4PAM decoding                            %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
decoded_rect = (line_decoded_rect_vec);
decoded_downsample_rect = downsample(decoded_rect, m);

decoded_rcos = (line_decoded_rcos_vec);
decoded_downsample_rcos = downsample(decoded_rcos, m);

final_output_rect = fourpamunmapA(decoded_downsample_rect);
final_output_rcos = fourpamunmapA(decoded_downsample_rcos);

count_rect = 0; 
count_rcos = 0; 
disp(length(binary_vector)); disp(length(final_output_rcos))
for p = 1: length(binary_vector)
    if binary_vector(p) == final_output_rect(p)
        count_rect = count_rect + 1;
    end
    if binary_vector(p) == final_output_rcos(p)
        count_rcos = count_rcos + 1;
    end
end
disp(count_rcos/length(binary_vector))
%------------------------------------------------------------------------------------
%----------------------------------------------------------------------------------------
%This section is just to check stuff/ ignore unless curious
% plot(modulated_rect_vec);
% hold off;
% subplot(2,1,1)
% plot(modulated_rcos_vec);
% subplot(2,1,2)
% hold on;
% plot(line_vector_rect);
% % ts = 1/fs;
% upsample_factor = fs;
% % 
% t = 1/m:1/m:length(symbols_vector);
% t = linspace(1, len_ip, len_ip * upsample_factor);
% lv_rect_upsampled = interp1(1:len_ip, line_vector_rect, t, 'linear');
% lv_rcos_upsampled = interp1(1:len_ip, line_vector_rcos, t, 'linear');
% len_up = length(lv_rect_upsampled);
% modulation failures 
% line_vector_rect = repelem(line_vector_rect, fs);
% line_vector_rcos = repelem(line_vector_rcos, fs); %i think we need to upsample this using linear upsampling. 
% disp(length(line_vector_rcos)); disp(length(line_vector_rect)); disp(length(carrier));
% 
% binary_vectorA = fourpamunmapA(symbols_vector);
% 
% binary_matrix = reshape(binary_vectorA, [], 16);
% audio_integers = bin2dec(binary_matrix); 
% audio_reconstructed = typecast(uint16(audio_integers), 'int16'); 
% audio_reconstructed_normalized = double(audio_reconstructed) / 32767; 
% 
% audiowrite('reconstructed_project.wav', audio_reconstructed_normalized, fs);
% % 
% sound(audio1, fs); 
% pause(length(audio)/fs + 1);
% sound(audio_reconstructed_normalized, fs);