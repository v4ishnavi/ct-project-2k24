clc;clear;close all;
%A/D Conversion
[audio1, fs] = audioread('project.wav');

% This is the A/D converter, completely copied honestly

audio = audio1(:,1);
audio = audio(1:100);
audio_normalized = int16(audio * 32767); 
audio_binary = dec2bin(typecast(audio_normalized(:), 'uint16'), 16); 
binary_vector = audio_binary(:)';

%------------------------------------------------------------------------------
l = length(binary_vector);
k = 8; 
m = 4; %mapping to 4 bits 

%This section of the code encodes the binary vector using 4-PAM 
symbols_vector = fourpammapA(binary_vector);
disp(length(symbols_vector))
% symbols_vector = [1 1 1 3 3 -3 -1 1 1 1 3 3 -3 -1 1 1 1 3 3 -3 -1];
%-------------------------------------------------------------------------------
%LINE CODING 
disp(l);
symbols_vector_up = zeros(1,m*l/2);
for j = 1:l/2
    symbols_vector_up(j + (j-1)*(m-1)) = symbols_vector(j);
end %you could have just used upsample, but okie
% Rectangular pulse
p1 = [ones(1,k/2)];

%raised cosine pulse 
a = 0.5;
[p2, ~] = raised_cosine(a, 4, k/2);

line_vector_rect = conv(symbols_vector_up,p1,'same');
line_vector_rcos = conv(symbols_vector_up, p2, 'same');
% figure;
% plot(1:m*k,line_vector_rect);
% hold on
% plot(1:m*k, line_vector_rcos);
% hold on
% stem(1:m*k, symbols_vector_up);
% hold off
%-------------------------------------------------------------------------------------
%MODULATION PART: here there is no doppler effect so dsb-sc
%rectangular encoded: 
 fc = 1e6;
len_ip = length(symbols_vector_up); 

t = (0:len_ip-1)/fs;
carrier = cos(fc*2*pi*t);
% disp(length(t)); disp(length(t));
disp(length(line_vector_rect)); disp(length(carrier))
modulated_rect_vec = line_vector_rect .* carrier;
% modulated_rcos_vec = line_vector_rcos .* carrier;

figure;
plot(t,modulated_rect_vec);

% figure; 
% subplot(2,1,1)
% stem(1:length(fft(line_vector_rect)),abs(fft(line_vector_rect)))
% subplot(2,1,2)
% stem(1:length(fft(modulated_rect_vec)), abs(fft(modulated_rect_vec)))

%_---------------------------------------------------------------------
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%                             line decoding                           %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Channel memoryless: 
% assume channel noise has SNR = 3
% channel_op_rcos = awgn(modulated_rcos_vec, 1);
channel_op_rect = awgn(modulated_rect_vec, 3); 
figure; 
% subplot(2,1,1)
% plot(channel_op_rcos);
% subplot(2,1,2);
plot(channel_op_rect);

%channel memory: 


%---------------------------------------------------------------------------------------
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%                             demodulation                            %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
demod_rect_vec = channel_op_rect.*carrier;
figure;
plot(t, demod_rect_vec);

%----------------------------------------------------------------------------------
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%                             line decoding                           %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




%------------------------------------------------------------------------------------
%----------------------------------------------------------------------------------------
%This section is just to check stuff/ ignore unless curious
% plot(modulated_rect_vec);
% hold off;
% subplot(2,1,1)
% plot(modulated_rcos_vec);
% subplot(2,1,2)
% hold on;
% plot(line_vector_rect);
% % ts = 1/fs;
% upsample_factor = fs;
% % 
% t = 1/m:1/m:length(symbols_vector);
% t = linspace(1, len_ip, len_ip * upsample_factor);
% lv_rect_upsampled = interp1(1:len_ip, line_vector_rect, t, 'linear');
% lv_rcos_upsampled = interp1(1:len_ip, line_vector_rcos, t, 'linear');
% len_up = length(lv_rect_upsampled);
% modulation failures 
% line_vector_rect = repelem(line_vector_rect, fs);
% line_vector_rcos = repelem(line_vector_rcos, fs); %i think we need to upsample this using linear upsampling. 
% disp(length(line_vector_rcos)); disp(length(line_vector_rect)); disp(length(carrier));
% 
% binary_vectorA = fourpamunmapA(symbols_vector);
% 
% binary_matrix = reshape(binary_vectorA, [], 16);
% audio_integers = bin2dec(binary_matrix); 
% audio_reconstructed = typecast(uint16(audio_integers), 'int16'); 
% audio_reconstructed_normalized = double(audio_reconstructed) / 32767; 
% 
% audiowrite('reconstructed_project.wav', audio_reconstructed_normalized, fs);
% % 
% sound(audio1, fs); 
% pause(length(audio)/fs + 1);
% sound(audio_reconstructed_normalized, fs);